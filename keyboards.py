# keyboards.py

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime, timedelta
import calendar

# <-- –ù–û–í–´–ô –°–ü–ò–°–û–ö –ú–ï–°–Ø–¶–ï–í -->
# –°–ø–∏—Å–æ–∫ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂)
RUSSIAN_MONTHS = [
    "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
    "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
]

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
main_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è")],
        [KeyboardButton(text="üìî –ú–æ–∏ –∑–∞–ø–∏—Å–∏"), KeyboardButton(text="‚ÑπÔ∏è –û –Ω–∞—Å")]
    ],
    resize_keyboard=True
)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ "–û –Ω–∞—Å" ---
about_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="to_main_menu")]
    ]
)

# --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –û—Ç–º–µ–Ω—ã ---
cancel_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_process")]
])

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏ ---
def get_services_kb(services, prefix="service"):
    builder = InlineKeyboardBuilder()
    for service_id, service_info in services.items():
        builder.button(
            text=f"{service_info['name']} ({service_info['price']} —Ä—É–±.)",
            callback_data=f"{prefix}:{service_id}"
        )
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="to_main_menu")
    builder.adjust(1)
    return builder.as_markup()

# --- –ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã ---
def create_calendar_kb(year=None, month=None, prefix="date"):
    if year is None: year = datetime.now().year
    if month is None: month = datetime.now().month

    builder = InlineKeyboardBuilder()
    
    # <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à —Å–ø–∏—Å–æ–∫ –≤–º–µ—Å—Ç–æ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ -->
    month_name = RUSSIAN_MONTHS[month - 1]
    builder.row(
        InlineKeyboardButton(text=" ", callback_data="ignore"),
        InlineKeyboardButton(text=f"{month_name} {year}", callback_data="ignore"),
        InlineKeyboardButton(text=" ", callback_data="ignore")
    )
    days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    builder.row(*[InlineKeyboardButton(text=day, callback_data="ignore") for day in days])

    month_calendar = calendar.monthcalendar(year, month)
    for week in month_calendar:
        row_buttons = []
        for day in week:
            if day == 0:
                row_buttons.append(InlineKeyboardButton(text=" ", callback_data="ignore"))
            else:
                current_date = datetime(year, month, day).date()
                if current_date < datetime.now().date():
                    row_buttons.append(InlineKeyboardButton(text=str(day), callback_data="ignore"))
                else:
                    row_buttons.append(InlineKeyboardButton(text=str(day), callback_data=f"{prefix}:{current_date.strftime('%Y-%m-%d')}"))
        builder.row(*row_buttons)

    nav_callback_prefix = prefix.replace('date', '')
    builder.row(
        InlineKeyboardButton(text="<", callback_data=f"{nav_callback_prefix}prev_month:{year}-{month}"),
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_services"),
        InlineKeyboardButton(text=">", callback_data=f"{nav_callback_prefix}next_month:{year}-{month}")
    )
    return builder.as_markup()

# (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ–∞–π–ª–∞ keyboards.py –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
# ... (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—é–¥–∞ –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞ keyboards.py)
def get_time_slots_kb(available_slots, back_callback="back_to_calendar", prefix="time"):
    builder = InlineKeyboardBuilder()
    if not available_slots:
        builder.button(text="–°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç", callback_data="ignore")
    else:
        for slot in available_slots:
            builder.button(text=slot.strftime('%H:%M'), callback_data=f"{prefix}:{slot.strftime('%H:%M')}")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã", callback_data=back_callback)
    builder.adjust(4)
    return builder.as_markup()
    
def get_confirmation_kb(prefix=""):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"{prefix}confirm_booking")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_process")]
        ]
    )

def get_my_bookings_kb(bookings):
    builder = InlineKeyboardBuilder()
    if not bookings:
        builder.button(text="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π", callback_data="ignore")
    else:
        for booking in bookings:
            booking_id, service_name, booking_datetime = booking
            dt_obj = datetime.strptime(booking_datetime, '%Y-%m-%d %H:%M')
            text = f"{service_name} - {dt_obj.strftime('%d.%m.%Y %H:%M')}"
            builder.button(text=f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å: {text}", callback_data=f"cancel_booking:{booking_id}")
    
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="to_main_menu")
    builder.adjust(1)
    return builder.as_markup()

admin_main_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üìã –ó–∞–ø–∏—Å–∏ –Ω–∞ –¥–µ–Ω—å", callback_data="admin_view_bookings")],
    [InlineKeyboardButton(text="üóìÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞–º–∏", callback_data="admin_manage_slots")],
    [InlineKeyboardButton(text="‚úçÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", callback_data="admin_manual_booking_start")],
    # <-- –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê –í–´–•–û–î–ê -->
    [InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")] 
])


admin_manage_slots_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç", callback_data="admin_add_slot")],
    [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–ª–æ—Ç", callback_data="admin_remove_slot_start")],
    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
])

def get_slots_for_removal_kb(slots, date_str):
    builder = InlineKeyboardBuilder()
    if not slots:
        builder.button(text="–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", callback_data="ignore")
    else:
        for slot in slots:
            builder.button(
                text=f"‚ùå {slot.strftime('%H:%M')}", 
                callback_data=f"admin_delete_slot:{date_str}_{slot.strftime('%H:%M')}"
            )
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_manage_slots")
    builder.adjust(4)
    return builder.as_markup()

admin_back_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
])