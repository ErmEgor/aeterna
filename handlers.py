# handlers.py

import logging
import re
from datetime import datetime, timedelta

from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State, any_state
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery

import database as db
import keyboards as kb
from config import ADMIN_IDS, SERVICES, WORK_HOURS

router = Router()

def format_date_russian(dt_obj):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ –∫—Ä–∞—Å–∏–≤—ã–π —Ä—É—Å—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç (e.g., '20 –∏—é–Ω—è 2025 –≥.')"""
    months = [
        "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
        "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
    ]
    return f"{dt_obj.day} {months[dt_obj.month - 1]} {dt_obj.year} –≥."

# ================================================
#          –ú–ê–®–ò–ù–ê –°–û–°–¢–û–Ø–ù–ò–ô (FSM)
# ================================================
class Booking(StatesGroup):
    choosing_service = State()
    choosing_date = State()
    choosing_time = State()
    entering_name = State()
    entering_phone = State()

class Admin(StatesGroup):
    panel = State()
    choosing_date_for_view = State()
    choosing_date_for_add = State()
    choosing_time_for_add = State()
    choosing_date_for_remove = State()
    manual_booking_service = State()
    manual_booking_date = State()
    manual_booking_time = State()
    manual_booking_name = State()
    manual_booking_phone = State()

# ================================================
#          –û–ë–©–ò–ï –•–ï–ù–î–õ–ï–†–´
# ================================================
@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}!\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏. "
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb.main_menu_kb
    )

# (### –ò–ó–ú–ï–ù–ï–ù–ò–ï 1 ###) –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–∞–∫–æ–Ω–∏—á–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
async def show_main_menu(message: Message, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."""
    await state.clear()
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb.main_menu_kb
    )

@router.callback_query(F.data == "cancel_process")
async def cancel_process(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    # (### –ò–ó–ú–ï–ù–ï–ù–ò–ï 2 ###) –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await callback.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await show_main_menu(callback.message, state)
    await callback.answer()

@router.callback_query(F.data == "to_main_menu")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    # (### –ò–ó–ú–ï–ù–ï–ù–ò–ï 3 ###) –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await callback.message.delete()
    await show_main_menu(callback.message, state)
    await callback.answer()
    
# ================================================
#          –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –°–¶–ï–ù–ê–†–ò–ô
# ================================================
@router.message(F.text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è")
async def process_booking(message: Message, state: FSMContext):
    await state.set_state(Booking.choosing_service)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=kb.get_services_kb(SERVICES))

@router.message(F.text == "üìî –ú–æ–∏ –∑–∞–ø–∏—Å–∏")
async def process_my_bookings(message: Message):
    bookings = db.get_user_bookings(message.from_user.id)
    await message.answer("–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏:", reply_markup=kb.get_my_bookings_kb(bookings))

@router.message(F.text == "‚ÑπÔ∏è –û –Ω–∞—Å")
async def process_about(message: Message):
    about_text = """
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>–°—Ç—É–¥–∏—é –∫—Ä–∞—Å–æ—Ç—ã "Aeterna"</b>!
<i>–ú–µ—Å—Ç–æ, –≥–¥–µ –≤–∞—à–∞ –∫—Ä–∞—Å–æ—Ç–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤–µ—á–Ω–æ–π.</i>

–ú—ã —Ä–∞–¥—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º –ø–µ—Ä–≤–æ–∫–ª–∞—Å—Å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∏ —É—é—Ç–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ-–Ω–∞—Å—Ç–æ—è—à–µ–º—É —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è.

<b>–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>
‚ú® <b>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º:</b> –ù–∞—à–∏ –º–∞—Å—Ç–µ—Ä–∞ ‚Äî —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Å –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º.
üõ°Ô∏è <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b> –ú—ã —Å—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞–µ–º –≤—Å–µ –Ω–æ—Ä–º—ã –°–∞–Ω–ü–∏–ù. –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç 3 —ç—Ç–∞–ø–∞ —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ü–∏–∏.
üíé <b>–ö–∞—á–µ—Å—Ç–≤–æ:</b> –†–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã—Ö, –≥–∏–ø–æ–∞–ª–ª–µ—Ä–≥–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö –æ—Ç –≤–µ–¥—É—â–∏—Ö –±—Ä–µ–Ω–¥–æ–≤.
‚òï <b>–ê—Ç–º–æ—Å—Ñ–µ—Ä–∞:</b> –£ –Ω–∞—Å –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è —á–∞—à–µ—á–∫–æ–π –∞—Ä–æ–º–∞—Ç–Ω–æ–≥–æ –∫–æ—Ñ–µ –∏–ª–∏ —á–∞—è –∏ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –æ—Ç –≥–æ—Ä–æ–¥—Å–∫–æ–π —Å—É–µ—Ç—ã.

üìç <b>–ù–∞—à –∞–¥—Ä–µ—Å:</b>
–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, –¥. 15, 2 —ç—Ç–∞–∂, –æ—Ñ–∏—Å 214

üïí <b>–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:</b>
–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, —Å 10:00 –¥–æ 21:00

üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏:</b>
+7 (495) 123-45-67

<b>–ú—ã –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö:</b>
<a href="https://instagram.com/">Instagram</a> | <a href="https://t.me/">Telegram-–∫–∞–Ω–∞–ª</a>
"""
    await message.answer(about_text, reply_markup=kb.about_kb)

# --- –®–∞–≥–∏ –∑–∞–ø–∏—Å–∏ ---
@router.callback_query(StateFilter(Booking.choosing_service, Admin.manual_booking_service), F.data.startswith(("service:", "admin_service:")))
async def process_service_choice(callback: CallbackQuery, state: FSMContext):
    is_admin = callback.data.startswith("admin_")
    prefix = "admin_" if is_admin else ""
    service_id = callback.data.split(":")[1]
    
    await state.update_data(service_id=service_id)
    next_state = Admin.manual_booking_date if is_admin else Booking.choosing_date
    await state.set_state(next_state)
    
    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{SERVICES[service_id]['name']}</b>\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=kb.create_calendar_kb(prefix=f"{prefix}date")
    )
    await callback.answer()

# (### –ò–ó–ú–ï–ù–ï–ù–ò–ï 4 ###) –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–∞—Ç—ã
@router.callback_query(StateFilter('*'), F.data == "past_date")
async def process_past_date_press(callback: CallbackQuery):
    await callback.answer(
        "–≠—Ç–∞ –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–∞—Ç—É.",
        show_alert=True
    )

@router.callback_query(StateFilter(Booking.choosing_date, Admin.manual_booking_date), F.data.startswith(("date:", "admin_date:")))
async def process_date_choice(callback: CallbackQuery, state: FSMContext):
    is_admin = callback.data.startswith("admin_")
    prefix = "admin_" if is_admin else ""
    date_str = callback.data.partition(":")[2]
    await state.update_data(chosen_date=date_str)
    
    user_data = await state.get_data()
    service_id = user_data['service_id']
    
    booked_slots = db.get_booked_slots(date_str)
    admin_slots = db.get_admin_slots(date_str)
    
    available_slots = []
    start_time = datetime.strptime(WORK_HOURS['start'], '%H:%M')
    end_time = datetime.strptime(WORK_HOURS['end'], '%H:%M')
    
    current_time = start_time
    while current_time < end_time:
        slot_time_obj = current_time.time()
        is_booked = any(
            slot_time_obj == booked_slot for booked_slot in booked_slots
        )
        if not is_booked:
            available_slots.append(slot_time_obj)
        current_time += timedelta(minutes=15)
        
    for admin_slot in admin_slots:
        if admin_slot not in [s for s in available_slots] and admin_slot not in booked_slots:
            available_slots.append(admin_slot)
    
    available_slots.sort()

    next_state = Admin.manual_booking_time if is_admin else Booking.choosing_time
    await state.set_state(next_state)

    date_obj = datetime.strptime(date_str, '%Y-%m-%d')
    await callback.message.edit_text(
        f"–î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ <b>{format_date_russian(date_obj)}</b>:",
        reply_markup=kb.get_time_slots_kb(
            available_slots, 
            back_callback="admin_panel" if is_admin else "back_to_services",
            prefix=f"{prefix}time"
        )
    )
    await callback.answer()

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –¥–æ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

@router.callback_query(StateFilter(Booking.choosing_time, Admin.manual_booking_time), F.data.startswith(("time:", "admin_time:")))
async def process_time_choice(callback: CallbackQuery, state: FSMContext):
    time_str = callback.data.partition(":")[2]
    await state.update_data(chosen_time=time_str)
    
    is_admin = callback.data.startswith("admin_")
    next_state = Admin.manual_booking_name if is_admin else Booking.entering_name
    await state.set_state(next_state)
    
    prompt_text = "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:" if is_admin else "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
    await callback.message.edit_text(prompt_text, reply_markup=kb.cancel_kb)
    await callback.answer()

@router.message(StateFilter(Booking.entering_name, Admin.manual_booking_name))
async def process_name_input(message: Message, state: FSMContext):
    await state.update_data(user_name=message.text)
    
    current_state = await state.get_state()
    is_admin = current_state == Admin.manual_booking_name
    next_state = Admin.manual_booking_phone if is_admin else Booking.entering_phone
    await state.set_state(next_state)
    
    prompt_text = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79123456789:" if is_admin else "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79123456789:"
    await message.answer(prompt_text, reply_markup=kb.cancel_kb)

@router.message(StateFilter(Booking.entering_phone, Admin.manual_booking_phone))
async def process_phone_input(message: Message, state: FSMContext):
    phone_pattern = r'^\+7\d{10}$'
    if not re.match(phone_pattern, message.text):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79123456789.", reply_markup=kb.cancel_kb)
        return
    
    await state.update_data(user_phone=message.text)
    user_data = await state.get_data()
    
    service_name = SERVICES[user_data['service_id']]['name']
    booking_dt_obj = datetime.strptime(f"{user_data['chosen_date']} {user_data['chosen_time']}", '%Y-%m-%d %H:%M')
    
    current_state = await state.get_state()
    is_admin = current_state == Admin.manual_booking_phone
    prefix = "admin_" if is_admin else ""

    await message.answer(
        f"‚úÖ <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å:</b>\n\n"
        f"<b>–£—Å–ª—É–≥–∞:</b> {service_name}\n"
        f"<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {format_date_russian(booking_dt_obj)}, {booking_dt_obj.strftime('%H:%M')}\n"
        f"<b>–ò–º—è:</b> {user_data['user_name']}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {message.text}",
        reply_markup=kb.get_confirmation_kb(prefix=prefix)
    )

@router.callback_query(F.data.endswith("confirm_booking"))
async def process_confirm_booking(callback: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state not in (Booking.entering_phone, Admin.manual_booking_phone):
        await callback.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        return
        
    user_data = await state.get_data()
    is_admin = callback.data.startswith("admin_")
    
    service_name = SERVICES[user_data['service_id']]['name']
    booking_datetime = datetime.strptime(f"{user_data['chosen_date']} {user_data['chosen_time']}", '%Y-%m-%d %H:%M')
    user_name, user_phone = user_data['user_name'], user_data['user_phone']
    user_id = callback.from_user.id if not is_admin else 0 
    
    try:
        db.add_booking(user_id, user_name, user_phone, service_name, booking_datetime)
        
        if is_admin:
            final_text = (
                f"üéâ <b>–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
                f"–ö–ª–∏–µ–Ω—Ç {user_name} –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ {format_date_russian(booking_datetime)} –≤ {booking_datetime.strftime('%H:%M')}."
            )
        else:
            final_text = (
                f"üéâ <b>–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
                f"–ú—ã –∂–¥–µ–º –≤–∞—Å {format_date_russian(booking_datetime)} –≤ {booking_datetime.strftime('%H:%M')}.\n"
                f"–ó–∞ –¥–µ–Ω—å –¥–æ –≤–∏–∑–∏—Ç–∞ –º—ã –ø—Ä–∏—à–ª–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ."
            )

        await callback.message.edit_text(final_text, reply_markup=None)
        
        if not is_admin:
            admin_message = (
                f"üîî <b>–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞!</b>\n\n"
                f"<b>–ö–ª–∏–µ–Ω—Ç:</b> {user_name}, {user_phone}\n"
                f"<b>–£—Å–ª—É–≥–∞:</b> {service_name}\n"
                f"<b>–ö–æ–≥–¥–∞:</b> {format_date_russian(booking_datetime)} –≤ {booking_datetime.strftime('%H:%M')}\n"
                f"<b>ID –∫–ª–∏–µ–Ω—Ç–∞:</b> <code>{callback.from_user.id}</code>"
            )
            for admin_id in ADMIN_IDS:
                await callback.bot.send_message(admin_id, admin_message)
        
        await state.clear()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ë–î: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è–ª–∏.", reply_markup=None
        )
        await state.clear()
    
    await callback.answer()

@router.callback_query(F.data.startswith("cancel_booking:"))
async def process_cancel_booking(callback: CallbackQuery):
    booking_id = int(callback.data.split(":")[1])
    db.cancel_booking(booking_id)
    await callback.message.edit_text("–í–∞—à–∞ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=None)
    await callback.answer("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
# ================================================
#          –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨
# ================================================

@router.message(Command("admin"))
async def cmd_admin(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    await state.set_state(Admin.panel)
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=kb.admin_main_kb)

@router.callback_query(StateFilter(any_state), F.data == "admin_panel")
async def admin_panel_callback(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Admin.panel)
    await callback.message.edit_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb.admin_main_kb)
    await callback.answer()

@router.callback_query(Admin.panel, F.data == "admin_view_bookings")
async def admin_view_bookings(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Admin.choosing_date_for_view)
    # (### –ò–ó–ú–ï–ù–ï–ù–ò–ï 5 ###) –ü–µ—Ä–µ–¥–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –ø—Ä–µ—Ñ–∏–∫—Å
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π:", reply_markup=kb.create_calendar_kb(prefix="admin_date"))

# (### –ò–ó–ú–ï–ù–ï–ù–ò–ï 6 ###) –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –ø—Ä–µ—Ñ–∏–∫—Å
@router.callback_query(Admin.choosing_date_for_view, F.data.startswith("admin_date:"))
async def admin_show_daily_bookings(callback: CallbackQuery, state: FSMContext):
    date_str = callback.data.partition(":")[2]
    bookings = db.get_daily_bookings(date_str)
    
    date_obj = datetime.strptime(date_str, '%Y-%m-%d')
    if not bookings:
        response_text = f"–ù–∞ {format_date_russian(date_obj)} –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç."
    else:
        response_text = f"üìã <b>–ó–∞–ø–∏—Å–∏ –Ω–∞ {format_date_russian(date_obj)}:</b>\n\n"
        for booking in bookings:
            booking_time, name, phone, service = booking
            dt_obj = datetime.strptime(booking_time, '%Y-%m-%d %H:%M')
            response_text += f"‚ñ™Ô∏è <b>{dt_obj.strftime('%H:%M')}</b> - {name}, {phone} (<i>{service}</i>)\n"
            
    await callback.message.edit_text(response_text, reply_markup=kb.admin_back_kb)
    await state.set_state(Admin.panel)

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞–º–∏ ---
@router.callback_query(Admin.panel, F.data == "admin_manage_slots")
async def admin_manage_slots(callback: CallbackQuery):
    await callback.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏:", reply_markup=kb.admin_manage_slots_kb)
    await callback.answer()

@router.callback_query(Admin.panel, F.data == "admin_add_slot")
async def admin_add_slot_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Admin.choosing_date_for_add)
    # (### –ò–ó–ú–ï–ù–ï–ù–ò–ï 7 ###) –ü–µ—Ä–µ–¥–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –ø—Ä–µ—Ñ–∏–∫—Å
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞:", reply_markup=kb.create_calendar_kb(prefix="admin_date"))

# (### –ò–ó–ú–ï–ù–ï–ù–ò–ï 8 ###) –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –ø—Ä–µ—Ñ–∏–∫—Å
@router.callback_query(Admin.choosing_date_for_add, F.data.startswith("admin_date:"))
async def admin_add_slot_date(callback: CallbackQuery, state: FSMContext):
    date_str = callback.data.partition(":")[2]
    await state.update_data(admin_chosen_date=date_str)
    await state.set_state(Admin.choosing_time_for_add)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30).")

@router.message(Admin.choosing_time_for_add)
async def admin_add_slot_time(message: Message, state: FSMContext):
    try:
        time_obj = datetime.strptime(message.text, '%H:%M').time()
        user_data = await state.get_data()
        date_str = user_data['admin_chosen_date']
        slot_datetime = datetime.combine(datetime.strptime(date_str, '%Y-%m-%d'), time_obj)
        db.add_admin_slot(slot_datetime)
        await message.answer(f"‚úÖ –°–ª–æ—Ç <b>{slot_datetime.strftime('%d.%m.%Y %H:%M')}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=kb.admin_back_kb)
        await state.set_state(Admin.panel)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.")
        
@router.callback_query(Admin.panel, F.data == "admin_remove_slot_start")
async def admin_remove_slot_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Admin.choosing_date_for_remove)
    # (### –ò–ó–ú–ï–ù–ï–ù–ò–ï 9 ###) –ü–µ—Ä–µ–¥–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –ø—Ä–µ—Ñ–∏–∫—Å
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞:", reply_markup=kb.create_calendar_kb(prefix="admin_date"))

# (### –ò–ó–ú–ï–ù–ï–ù–ò–ï 10 ###) –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –ø—Ä–µ—Ñ–∏–∫—Å
@router.callback_query(Admin.choosing_date_for_remove, F.data.startswith("admin_date:"))
async def admin_remove_slot_date(callback: CallbackQuery, state: FSMContext):
    date_str = callback.data.partition(":")[2]
    slots_for_removal = db.get_admin_slots(date_str)
    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞ {format_date_russian(datetime.strptime(date_str, '%Y-%m-%d'))}:",
        reply_markup=kb.get_slots_for_removal_kb(slots_for_removal, date_str)
    )
    await state.set_state(Admin.panel)

@router.callback_query(Admin.panel, F.data.startswith("admin_delete_slot:"))
async def admin_delete_slot_confirm(callback: CallbackQuery, state: FSMContext):
    _, date_str, time_str = callback.data.split(":")
    slot_datetime = datetime.strptime(f"{date_str} {time_str}", '%Y-%m-%d %H:%M')
    db.remove_admin_slot(slot_datetime)
    await callback.message.edit_text(
        f"üóë –°–ª–æ—Ç <b>{slot_datetime.strftime('%d.%m.%Y %H:%M')}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
        reply_markup=kb.admin_back_kb
    )
    await callback.answer("–°–ª–æ—Ç —É–¥–∞–ª–µ–Ω")
    
# --- –†—É—á–Ω–∞—è –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞ ---
@router.callback_query(Admin.panel, F.data == "admin_manual_booking_start")
async def admin_manual_booking_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Admin.manual_booking_service)
    await callback.message.edit_text("–®–∞–≥ 1: –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞", reply_markup=kb.get_services_kb(SERVICES, prefix="admin_service"))